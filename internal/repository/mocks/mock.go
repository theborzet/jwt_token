// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\artem\Documents\Go_scripts\test_v_galery\internal\repository\repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetRefreshTokenHash mocks base method.
func (m *MockRepository) GetRefreshTokenHash(userID string) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokenHash", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRefreshTokenHash indicates an expected call of GetRefreshTokenHash.
func (mr *MockRepositoryMockRecorder) GetRefreshTokenHash(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenHash", reflect.TypeOf((*MockRepository)(nil).GetRefreshTokenHash), userID)
}

// SaveRefreshTokenHash mocks base method.
func (m *MockRepository) SaveRefreshTokenHash(userID, hash string, expiresAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRefreshTokenHash", userID, hash, expiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRefreshTokenHash indicates an expected call of SaveRefreshTokenHash.
func (mr *MockRepositoryMockRecorder) SaveRefreshTokenHash(userID, hash, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRefreshTokenHash", reflect.TypeOf((*MockRepository)(nil).SaveRefreshTokenHash), userID, hash, expiresAt)
}
